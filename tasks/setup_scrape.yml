---
- name: Install system packages
  ansible.builtin.apt:
    pkg:
      - python3.9
      - python3.9-dev
      - python3-pip
      - python3-systemd
      - rsync

- name: Checkout source code
  ansible.builtin.include_role:
    name: mila.clockwork
    tasks_from: checkout_src

- name: Install slurm_state requirements with pip
  ansible.builtin.pip:
    requirements: "{{ clockwork_install_path }}/slurm_state/requirements.txt"

- name: Create clockwork user
  ansible.builtin.user:
    name: "{{ clockwork_user }}"
    group: "{{ clockwork_group }}"
    home: "{{ clockwork_user_home }}"

- name: Create ssh dir
  ansible.builtin.file:
    path: "{{ clockwork_user_home }}/.ssh"
    state: directory
    owner: "{{ clockwork_user }}"
    group: "{{ clockwork_group }}"
    mode: 0700

- name: Copy ssh keys
  ansible.builtin.copy:
    content: "{{ item.content }}"
    dest: "{{ clockwork_user_home }}/.ssh/{{ item.name }}"
    owner: "{{ clockwork_user }}"
    group: "{{ clockwork_group }}"
    mode: 0600
  loop: "{{ clockwork_ssh_private_keys }}"

- name: Setup ssh config for clockwork
  ansible.builtin.template:
    src: templates/ssh_config.j2
    dest: "{{ clockwork_user_home }}/.ssh/config"
    mode: 0600
    owner: "{{ clockwork_user }}"
    group: "{{ clockwork_group }}"

- name: Create reports directory
  ansible.builtin.file:
    path: "{{ clockwork_user_home }}/reports/"
    state: directory
    mode: 0750
    owner: "{{ clockwork_user }}"
    group: "{{ clockwork_group }}"

- name: Ensure config dir is present
  ansible.builtin.file:
    path: /etc/clockwork
    mode: 0700
    state: directory
    owner: "{{ clockwork_user }}"
    group: "{{ clockwork_group }}"

- name: Configure Clockwork scrape
  ansible.builtin.template:
    src: templates/clockwork.toml.j2
    dest: /etc/clockwork/clockwork.toml
    mode: 0600
    owner: "{{ clockwork_user }}"
    group: "{{ clockwork_group }}"

- name: Setup cluster update scripts
  ansible.builtin.template:
    src: templates/clockwork-scrape.service.j2
    dest: /etc/systemd/system/clockwork-scrape-{{ item.name }}.service
    mode: 0600
  when: item.fetch_remote
  loop: '{{ clockwork_clusters }}'

- name: Setup systemd timer triggers
  ansible.builtin.template:
    src: templates/clockwork-scrape.timer.j2
    dest: /etc/systemd/system/clockwork-scrape-{{ item.name }}.timer
    mode: 0600
  when: item.fetch_remote
  loop: '{{ clockwork_clusters }}'

- name: Find all timers
  ansible.builtin.find:
    paths: /etc/systemd/system
    patterns: 'clockwork-scrape-*.timer'
  register: current_timers

- name: Find old timers
  ansible.builtin.set_fact:
   found_timers: "{{ current_timers.files | map(attribute='path') | map('regex_replace', '/etc/systemd/system/clockwork-scrape-(.+)\\.timer', '\\1') }}"
   needed_timers: "{{ clockwork_clusters | map(attribute='name') }}"

- name: Set old timers list
  ansible.builtin.set_fact:
    old_timers: "{{ found_timers | difference(needed_timers) }}"

- name: Disable old timers
  ansible.builtin.systemd:
    enabled: no
    name: clockwork-scrape-{{ item }}.timer
  loop: '{{ old_timers }}'

- name: Delete old systemd timers
  ansible.builtin.file:
    state: absent
    path: "/etc/systemd/system/clockwork-scrape-{{ item }}.timer"
  loop: '{{ old_timers }}'

- name: Delete old systemd services
  ansible.builtin.file:
    state: absent
    path: "/etc/systemd/system/clockwork-scrape-{{ item }}.service"
  loop: '{{ old_timers }}'

- name: Reload systemd
  ansible.builtin.systemd:
    daemon-reload: yes

- name: Enable systemd timers
  ansible.builtin.systemd:
    enabled: true
    state: started
    name: clockwork-scrape-{{ item.name }}.timer
  when: item.fetch_remote
  loop: '{{ clockwork_clusters }}'
